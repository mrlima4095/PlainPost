<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title id="page-title">Editor - BinDrop</title>
    
    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/theme/dracula.min.css">
    
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            display: flex;
            flex-direction: column;
            background-color: #121212;
            color: #fff;
            font-family: Arial, sans-serif;
        }
        header {
            background: #1f1f1f;
            padding: 10px 15px;
            font-size: 18px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        #editor-container {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        .CodeMirror {
            height: 100% !important;
            font-size: 14px;
            border-top: 1px solid #333;
        }
        #buttons {
            background: #1f1f1f;
            padding: 10px;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        button {
            padding: 8px 15px;
            background: #6200ee;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover { background: #3700b3; }
    </style>
</head>
<body>
    <header>
        <span id="file-name">Carregando...</span>
        <div id="buttons">
            <button onclick="saveFile()">Salvar</button>
            <button onclick="baixar()">Baixar</button>
            <button onclick="window.location.href='/drive'">Voltar</button>
        </div>
    </header>

    <!-- Barra de seleção de linguagem -->
    <div id="mode-selector" style="background:#1f1f1f; padding: 5px 15px; display: flex; align-items: center; color:#ccc;">
        <label for="syntax-mode" style="margin-right:10px;">Sintaxe:</label>
        <select id="syntax-mode" style="background:#121212; color:#fff; border:none; padding:4px 8px; border-radius:4px; font-size:14px;">
            <option value="text/plain">Plain Text</option>
            <option value="javascript">JavaScript</option>
            <option value="text/typescript">TypeScript</option>
            <option value="python">Python</option>
            <option value="htmlmixed">HTML</option>
            <option value="css">CSS</option>
            <option value="application/json">JSON</option>
            <option value="xml">XML</option>
            <option value="php">PHP</option>
            <option value="text/x-java">Java</option>
            <option value="text/x-csrc">C</option>
            <option value="text/x-c++src">C++</option>
            <option value="shell">Shell</option>
            <option value="text/x-sql">SQL</option>
            <option value="markdown">Markdown</option>
            <option value="yaml">YAML</option>
        </select>
    </div>

    <!-- CodeMirror JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/python/python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/xml/xml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/css/css.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/htmlmixed/htmlmixed.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/php/php.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/clike/clike.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/shell/shell.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/sql/sql.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/markdown/markdown.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/yaml/yaml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/python/python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/xml/xml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/htmlmixed/htmlmixed.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.5/mode/css/css.min.js"></script>

    
    <script>
        const fileId = "{{ file_id }}"; // Vem do Flask
        let editor;
        let filename = "";

        editor = CodeMirror.fromTextArea(document.getElementById('editor'), {
            lineNumbers: true,
            theme: 'dracula',
            mode: 'javascript', // Ajustaremos depois pelo tipo
            tabSize: 4,
            indentWithTabs: true
        });

        // Buscar conteúdo do arquivo
        fetch(`/api/drive/view/${fileId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    editor.setValue(data.content);
                    filename = data.filename || "Arquivo";
                    document.getElementById("file-name").textContent = filename;
                    document.title = filename + " - BinDrop";
                    detectarModo(filename);
                } else {
                    alert(data.response);
                }
            })
            .catch(err => alert("Erro ao carregar arquivo: " + err));

        // Salvar alterações
        function saveFile() {
            const newContent = editor.getValue();
            fetch(`/api/drive/save/${fileId}`, {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({content: newContent})
            })
            .then(response => response.json())
            .then(data => {
                alert(data.response || "Erro ao salvar");
            })
            .catch(err => alert("Erro: " + err));
        }

        function baixar() { saveFile(); window.location.href = `/api/drive/download/${fileId}`; }

        // Detectar linguagem pelo nome do arquivo
        // Após detectar o modo automaticamente, atualizar o select
        function detectarModo(nome) {
            nome = nome.toLowerCase();
            let mode = 'text/plain';

            if (nome.endsWith('.js') || nome.endsWith('.mjs') || nome.endsWith('.cjs')) {
                mode = 'javascript';
            } else if (nome.endsWith('.ts')) {
                mode = 'text/typescript';
            } else if (nome.endsWith('.py')) {
                mode = 'python';
            } else if (nome.endsWith('.html') || nome.endsWith('.htm')) {
                mode = 'htmlmixed';
            } else if (nome.endsWith('.css') || nome.endsWith('.scss')) {
                mode = 'css';
            } else if (nome.endsWith('.json')) {
                mode = 'application/json';
            } else if (nome.endsWith('.xml') || nome.endsWith('.svg')) {
                mode = 'xml';
            } else if (nome.endsWith('.php')) {
                mode = 'php';
            } else if (nome.endsWith('.java')) {
                mode = 'text/x-java';
            } else if (nome.endsWith('.c') || nome.endsWith('.h')) {
                mode = 'text/x-csrc';
            } else if (nome.endsWith('.cpp') || nome.endsWith('.hpp')) {
                mode = 'text/x-c++src';
            } else if (nome.endsWith('.sh') || nome.endsWith('.bash')) {
                mode = 'shell';
            } else if (nome.endsWith('.sql')) {
                mode = 'text/x-sql';
            } else if (nome.endsWith('.md')) {
                mode = 'markdown';
            } else if (nome.endsWith('.yml') || nome.endsWith('.yaml')) {
                mode = 'yaml';
            }

            editor.setOption('mode', mode);
            // Atualiza o select para refletir o modo detectado
            const select = document.getElementById('syntax-mode');
            select.value = mode;
        }

        // Quando o usuário mudar manualmente o select, atualiza o editor
        document.getElementById('syntax-mode').addEventListener('change', (e) => {
            const mode = e.target.value;
            editor.setOption('mode', mode);
        });
    </script>
</body>
</html>
